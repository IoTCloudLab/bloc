{
  "name": "ethlightjs",
  "version": "0.0.2",
  "description": "A light weight ethereum javascript wallet.",
  "main": "index.js",
  "scripts": {
    "build-js": "browserify index.js --s ethlightjs | uglifyjs -mc > ethlightjs.min.js",
    "build-dev": "browserify index.js -o ethlightjs.js --s ethlightjs",
    "test": "./node_modules/.bin/mocha --reporter spec",
    "coverage": "istanbul cover _mocha -- -R spec; open coverage/lcov-report/index.html"
  },
  "keywords": [
    "ethereum",
    "blockchain",
    "transactions",
    "contracts"
  ],
  "contributors": [
    {
      "name": "Christian Lundkvist",
      "email": "christian.lundkvist@gmail.com"
    },
    {
      "name": "Tyler Clark",
      "email": "tysclark@gmail.com"
    },
    {
      "name": "Joel Torstensson",
      "email": "me@joeltorstensson.se"
    },
    {
      "name": "Zach Ferland",
      "email": "zachferland@gmail.com"
    },
    {
      "name": "Kevin Jiao",
      "email": "kevin.jiao@berkeley.edu"
    }
  ],
  "license": "ISC",
  "dependencies": {
    "bitcore": "^0.12.8",
    "bitcore-mnemonic": "^0.11.0",
    "crypto-js": "^3.1.5",
    "elliptic": "^3.1.0",
    "rlp": "^1.0.0",
    "web3": "^0.6.0",
    "ethereumjs-tx": "^0.4.0",
    "ethereumjs-util": "^1.2.0",
    "bignumber.js": "debris/bignumber.js#master",
    "xhr2": "*"
  },
  "devDependencies": {
    "browserify": "^10.2.4",
    "chai": "^3.0.0",
    "istanbul": "^0.3.15",
    "mocha": "^2.2.5",
    "uglify-js": "^2.4.23"
  },
  "readme": "# EthLightJs\n\nA minimal ethereum javascript wallet.\n\n## Get Started\n\n```\ngit clone https://github.com/ConsenSys/LightWallet.git\ncd LightWallet\nnpm install\nnpm run build-js\n```\n\nThis will create the file `ethlightjs.min.js` that can be included in an HTML page:\n\n```\n<html>\n  <body>\n    <script src=\"ethlightjs.min.js\"></script>\n  </body>\n</html>\n```\n\nTo build a node package:\n\n```\nnpm install path/to/LightWallet\n```\n\nTo create a keystore, and sign and send a transaction:\n\n\n\n\n## `keystore` Function definitions\n\nThese are the interface functions for the keystore object. The keystore object holds a 12-word seed according to [BIP39][] spec. From this seed you can generate addresses and private keys, and use the private keys to sign transactions.\n\nNote: Addresses and RLP encoded data are in the form of hex-strings. Hex-strings do not start with `0x`.\n\n### `keystore(seed, password)`\n\nConstructor of the keystore object. The seed `seed` is encrypted with `password` and stored encrypted in the keystore.\n\n#### Inputs\n\n* words: string defining a 12-word seed according to [BIP39][]\n* password: password to encrypt the seed\n\n[BIP39]: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\n### `keystore.generateRandomSeed()`\n\nGenerates a string consisting of a random 12-word seed and returns it.\n\n### `keystore.generateNewAddress(password)`\n\nGenerates a new address/private key pair from the seed and stores them in the keystore. The private key is stored encrypted with the users password.\n\n### `keystore.deserialize(serialized_keystore)`\n\nTakes a serialized keystore string `serialized_keystore` and returns a new keystore object.\n\n### `keystore.serialize()`\n\nSerializes the current keystore object into a JSON-encoded string and returns that string.\n\n### `keystore.getAddresses()`\n\nReturns a list of hex-string addresses currently stored in the keystore.\n\n### `keystore.getSeed(password)`\n\nGiven the password, decrypts and returns the users 12-word seed.\n\n### `keystore.exportPrivateKey(address, password)`\n\nGiven the password, decrypts and returns the private key corresponding to `address`. This should be done sparingly as the recommended practice is for the `keystore` to sign transactions using `keystore.signTx`, so there is normally no need to export private keys.\n\n### `keystore.signTx(rawTx, password, signingAddress)`\n\nSigns a transaction with the private key corresponding to `signingAddress`\n\n#### Inputs\n\n* `rawTx`: Hex-string defining an RLP-encoded raw transaction.\n* `password`: the users password (string)\n* `fromAddress`: hex-string defining the address to send the transaction from.\n\n#### Return value\n\nHex-string corresponding to the RLP-encoded raw transaction.\n\n## `txutils` Function definitions\n\n### `txutils.createContractTx(fromAddress, txObject)`\n\nUsing the data in `txObject`, creates an RLP-encoded transaction that will create the contract with compiled bytecode defined by `txObject.data`. Also computes the address of the created contract.\n\n#### Inputs\n\n* `fromAddress`: Address to send the transaction from\n* `txObject.gasLimit`: Gas limit\n* `txObject.gasPrice`: Gas price\n* `txObject.value`: Endowment (optional)\n* `txObject.nonce`: Nonce of `fromAddress`\n* `txObject.data`: Compiled code of the contract\n\n#### Output\n\nObject `obj` with fields\n\n* `obj.tx`: RLP encoded transaction (hex string)\n* `obj.addr`: Address of the created contract\n\n### `txutils.functionTx(abi, functionName, args, txObject)`\n\nCreates a transaction calling a function with name `functionName`, with arguments `args` conforming to `abi`. The function is defined in a contract with address `txObject.to`.\n\n#### Inputs\n\n* `abi`: Json-formatted ABI as returned from the `solc` compiler\n* `functionName`: string with the function name\n* `args`: Array with the arguments to the function\n* `txObject.to`: Address of the contract\n* `txObject.gasLimit`: Gas limit\n* `txObject.gasPrice`: Gas price\n* `txObject.value`: Value to send\n* `txObject.nonce`: Nonce of sending address\n\n#### Output\n\nRLP-encoded hex string defining the transaction.\n\n\n### `txutils.valueTx(txObject)`\n\nCreates a transaction sending value to `txObject.to`.\n\n#### Inputs\n\n* `txObject.to`: Address to send to\n* `txObject.gasLimit`: Gas limit\n* `txObject.gasPrice`: Gas price\n* `txObject.value`: Value to send\n* `txObject.nonce`: Nonce of sending address\n\n#### Output\n\nRLP-encoded hex string defining the transaction.\n\n## `helpers` Function definitions\n\nThese are helper functions for packaging up some of the functionality in the `keystore` and `txutils`. They create, sign and send a transaction using `txutils` and `keystore`.\n\nThey use an object `blockchainApi` that define the following functions:\n\n* `blockchainApi.getNonce(address)`: Returns the nonce of an address\n* `blockchainApi.getBalance(address)`: Returns the balance of an address\n* `blockchainApi.injectTransaction(rawTx)`: Injects a signed transaction into the network\n\nWe include two APIs: `web3api` and `blockappsapi` with predefined functions calling either an ethereum client or the blockapps backend.\n\n### `helpers.sendFunctionTx(abi, contractAddr, functionName, args, fromAddr, txObject, blockchainApi, keystore, password)`\n\nCreates, signs, and sends a transaction calling a function `functionName` conforming to `abi` of a contract at address `contractAddr` with arguments `args`. Returns the hash of the transaction. The `abi` is a JSON object specifying the ABI of the contract.\n\nThe object `txObject` contains the following optional arguments:\n\n* `txObject.gasLimit`: Gas limit\n* `txObject.gasPrice`: Gas price\n* `txObject.value`: Value to send in the function call\n* `txObject.nonce`: Nonce of `fromAddress`\n\nIf the arguments are not provided default values will be used.\n\n### `helpers.sendCreateContractTx(bytecode, fromAddr, txObject, blockchainApi, keystore, password)`\n\nSigns and sends a transaction creating the contract with compiled code `bytecode`. The object `txObject` contains optional arguments as described in the `helpers.sendFunctionTx()` section. Returns the address of the newly created contract.\n\n### `helpers.sendValueTx(fromAddr, toAddr, value, txObject, blockchainApi, keystore, password)`\n\nSigns and send a transaction sending `value` wei from `fromAddr` to `toAddr`. The object `txObject` contains the optional items in the `helpers.sendFunctionTx()` section, except `txObject.value`.\n\n## Examples\n\nSee the file `example_usage.js` for usage of `keystore` and `txutils`.\n\nSee the file `example_helpers.js` for using the `helpers` functions.\n\nSee the file `example_web.html` for an example of how to use the LightWallet functionality in the browser.\n\n## Tests\n\nRun all tests:\n\n```\nnpm run test\nnpm run coverage\n```\n\n## License\n",
  "readmeFilename": "README.md",
  "_id": "ethlightjs@0.0.2",
  "dist": {
    "shasum": "bdf7a9dba5a6d2122d98ca899c1a50c56b44194d"
  },
  "_from": "LightWallet"
}

{
  "name": "ethereumjs-tx",
  "version": "0.4.0",
  "description": "An simple module for creating, manipulating and signing ethereum transactions",
  "main": "index.js",
  "scripts": {
    "test": "./bin/tester -t",
    "build": "browserify --s EthTx index.js > ./dist/ethereumjs-tx.js"
  },
  "keywords": [
    "ethereum",
    "transactions"
  ],
  "author": {
    "name": "mjbecze",
    "email": "mb@ethdev.com"
  },
  "license": "GPL",
  "dependencies": {
    "bn.js": "^2.0.5",
    "elliptic": "^3.1.0",
    "ethereum-common": "0.0.3",
    "ethereumjs-util": "^1.2.0",
    "rlp": "^1.0.0",
    "secp256k1": "0.0.15"
  },
  "devDependencies": {
    "async": "^1.2.1",
    "ethereum-tests": "git+https://github.com/ethereum/tests#develop",
    "minimist": "^1.1.1",
    "tape": "^4.0.0"
  },
  "browser": {
    "./ecdsaOps.js": "./ecdsaOpsBrowser.js"
  },
  "testling": {
    "browsers": [
      "ie/9..latest",
      "firefox/15..latest",
      "chrome/22..latest"
    ],
    "files": [
      "test/transactions.js"
    ]
  },
  "readme": "# SYNOPSIS [![Build Status](https://travis-ci.org/ethereum/ethereumjs-tx.svg)](https://travis-ci.org/ethereum/ethereumjs-tx)\nA simple module for creating, manipulating and signing Ethereum transactions. \n\n# CONTACT\n [Scrollback](https://scrollback.io/ethereumjs/all/all-messages) or #ethereumjs on freenode\n\n# INSTALL\n`npm install ethereumjs-tx`\n\n# USAGE\n```javascript\nvar Tx = require('ethereumjs-tx');\nvar privateKey = new Buffer('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex');\n\nvar rawTx = {\n  nonce: '00',\n  gasPrice: '09184e72a000', \n  gasLimit: '2710',\n  to: '0000000000000000000000000000000000000000', \n  value: '00', \n  data: '7f7465737432000000000000000000000000000000000000000000000000000000600057'\n};\n\nvar tx = new Tx(rawTx);\ntx.sign(privateKey);\n\nvar serializedTx = tx.serialize();\n\n```\n\n# Bowser  \nFor standalone use in the browser inculde [./dist/ethereumjs-tx.js](https://github.com/ethereum/ethereumjs-tx/blob/master/dist/ethereumjs-tx.js)  \nThis will give you a gobal varible `EthTx` to use. It will also create the globals `Buffer` and `ethUtil`  \nTo build for standalone use in the browser install `browserify` and run `npm run build`.\n\n# API\n\n- [`Transaction`](#transaction)\n    - [`new Transaction([data])`](#new-transactiondata)\n    - [`Transaction` Properties](#transaction-properties)\n    - [`Transaction` Methods](#transaction-methods)\n        - [`transaction.serialize()`](#transactionserialize) \n        - [`transaction.hash([signature])`](#transactionhashsignature)\n        - [`transaction.sign(privateKey)`](#transactionsignprivatekey)\n        - [`transaction.getSenderAddress()`](#transactiongetsenderaddress)\n        - [`transaction.getSenderPublicKey()`](#transactiongetsenderpublickey)\n        - [`transaction.validate()`](#transactionvalidate)\n        - [`transaction.validateSignature()`](#transactionvalidatesignature)\n        - [`transaction.getDataFee()`](#transactiongetdatafee)\n        - [`transaction.getBaseFee()`](#transactiongetbasefee)\n        - [`transaction.getUpfrontCost()`](#transactiongetupfrontcost)\n        - [`transaction.toJSON([object])`](#transactiontojsonobject)\n\n## `Transaction`\nImplements schema and functions relating to Ethereum transactions\n- [example](https://github.com/ethereum/ethereumjs-tx/blob/master/examples/transactions.js)\n\n### `new Transaction([data])`\nCreates a new transaction object\n- `data` - a transaction can be initiailized with either a `buffer` containing the RLP serialized transaction or an `array` of buffers relating to each of the tx Properties, listed in order below.  For example.\n```javascript\nvar rawTx = {\n  nonce: '00',\n  gasPrice: '09184e72a000', \n  gasLimit: '2710',\n  to: '0000000000000000000000000000000000000000', \n  value: '00', \n  data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n  v: '1c', \n  r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n  s '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n};\n\nvar tx = new Transaction(rawTx);\n```\nOr lastly an `Object` containing the Properties of the transaction like in the [Usage](#usage) example\n\nFor `Object` and `Arrays` each of the elements can either be a `Buffer`, hex `String` , `Number`, or an object with a `toBuffer` method such as `Bignum`\n\n### `transaction` Properties\n- `raw` - The raw rlp decoded transaction.\n- `nonce` \n- `to` - the to address\n- `value` - the amount of ether sent\n- `data` - this will contain the `data` of the message or the `init` of a contract.\n- `v` - EC signature parameter\n- `r` - EC signature parameter\n- `s` - EC recovery ID\n\n--------------------------------------------------------\n\n### `Transaction` Methods\n\n#### `transaction.serialize()`\nReturns the RLP serialization of the transaction  \n**Return:** 32 Byte `Buffer`\n\n--------------------------------------------------------\n\n#### `transaction.hash([signature])`\nReturns the SHA3-256 hash of the rlp transaction  \n**Parameters**  \n- `signature` - a `Boolean` determining if to include the signature components of the transaction. Defaults to true. \n\n**Return:** 32 Byte `Buffer`\n\n--------------------------------------------------------\n\n#### `transaction.sign(privateKey)`\nSigns the transaction with the given privateKey.  \n**Parameters**  \n- `privateKey` - a 32 Byte `Buffer`\n\n--------------------------------------------------------\n\n#### `transaction.getSenderAddress()`\nReturns the senders address  \n**Return:** 20 Byte `Buffer`\n\n--------------------------------------------------------\n\n#### `transaction.getSenderPublicKey()`\nreturns the public key of the  sender  \n**Return:** `Buffer`\n\n--------------------------------------------------------\n\n#### `transaction.validate()`\nDetermines if the transaction is schematicly valid by checking its signature and gasCost.  \n**Return:** `Boolean` \n\n--------------------------------------------------------\n\n#### `transaction.validateSignature()`\nDetermines if the signature is valid  \n**Return:** `Boolean` \n\n--------------------------------------------------------\n\n#### `transaction.getDataFee()`\nReturns the amount of gas to be paid for the data in this transaction  \n**Return:** `bn.js` \n\n--------------------------------------------------------\n\n#### `transaction.getBaseFee()`\nReturns the minimum amount of gas the tx must have (DataFee + TxFee)  \n**Return:** `bn.js` \n\n--------------------------------------------------------\n\n#### `transaction.getUpfrontCost()`\nThe total amount needed in the account of the sender for the transaction to be valid  \n**Return:** `bn.js` \n\n--------------------------------------------------------\n\n#### `transaction.toJSON([object])`\nReturns transaction as JSON  \n**Parameters**  \n- `object` - a `Boolean` that defaults to false. If `object` is true then this will return an object else it will return an `array`  \n\n**Return:** `Object` or `Array`\n\n# TESTS\ntest uses mocha. To run  \n`npm test`\n",
  "readmeFilename": "README.md",
  "_id": "ethereumjs-tx@0.4.0",
  "dist": {
    "shasum": "42980933208f65745521e2629258d6e119458c61"
  },
  "_from": "ethereumjs-tx@^0.4.0",
  "_resolved": "https://registry.npmjs.org/ethereumjs-tx/-/ethereumjs-tx-0.4.0.tgz"
}

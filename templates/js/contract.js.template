var blockapps = require("blockapps-js");
var Promise = require("bluebird");
var contract = blockapps.Solidity.attach({{{solObjWAddr}}});
blockapps.query.serverURI = '{{{serverURI}}}';

var globalKeystore;

function submit() {
    var userObj = {
        app: appCreateUser.value,
        email: emailCreateUser.value,
        loginpass: loginpassCreateUser.value,
        address: addressCreateUser.value,
        enckey: enckeyCreateUser.value
     };
    /*global function from registerUser.js */
    submitUser(userObj, function (res) {
        var data = JSON.parse(res);
        createUserDiv.style.display = "none";
        var para = document.createElement("P");
        para.setAttribute("id","walletCreateMessage");
        var t = document.createTextNode("Confirm in your email. This is your new wallet file: \n\n" + res);
        para.appendChild(t);
        document.body.appendChild(para);
        console.log("wallet: " + data.encryptedWallet);
        console.log("addresses: " + JSON.parse(data.encryptedWallet).addresses);
        
        var faucetAddr = JSON.parse(data.encryptedWallet).addresses[0];
        console.log("sending faucet request");
        blockapps.routes.faucet(faucetAddr).then(function() {
            console.log("faucet should have worked");
        });
    });
};

function showRegister() {
    keygenDiv.style.display = "table";
        loginDiv.style.display = "none";
    }

function showLogin() {
    createUserDiv.style.display = "none";
    if (typeof walletCreateMessage !== "undefined") walletCreateMessage.style.display = "none";
    keygenDiv.style.display = "none";
    loginDiv.style.display = "table";
    walletDiv.style.display="none";
};

function hideOnLoad() {
    createUserDiv.style.display = "none";
    walletDiv.style.display = "none";
    loginDiv.style.display = "none";
    functionsDiv.style.display = "none";
    keygenDiv.style.display = "none";
}

function genKeyUser() {
    console.log("moving from keygen to create user");
    createUserDiv.style.display = "table";
    keygenDiv.style.display = "none";
    genKey(keypass.value, function (keystore) {
        addressCreateUser.value = keystore.addresses[0];
        enckeyCreateUser.value = keystore.serialize();
  
  });
};

function retrieve() {
    var userObj = {
        app : appLogin.value,
        email : emailLogin.value,
        loginpass : loginpassLogin.value,
        address : addressLogin.value
    };
    retrieveUser(userObj,function (keystore) {
        loginDiv.style.display = "none";
        var para = document.createElement("P");
        var t = document.createTextNode("Retrieved your wallet. Enter your password, and you can sign transactions: ");
        para.appendChild(t);
        var input = document.createElement("input");
        var itemLabel = document.createElement("Label");
        input.type = "password";
        input.setAttribute("id","walletDecrypt");
        itemLabel.setAttribute("for", "walletDecrypt");
        itemLabel.innerHTML = "Enter Password: ";
        para.appendChild(input);
        document.body.appendChild(para);
        walletaddress.value=keystore.addresses[0];
        walletDiv.style.display="table"
        loginDiv.style.display = "none";
        globalKeystore = keystore;
        functionsDiv.style.display = "table";
    });
}

function callFunc(funcName) {
    console.log("globalKeystore: " + JSON.stringify(globalKeystore));
    var eth = blockapps.ethbase.Units.unitSchema.ether;

    var privkey = globalKeystore.exportPrivateKey(
        walletaddress.value, document.getElementById("walletDecrypt").value);
    console.log("privkey: " + privkey);

    var args = [];
    var funcDivElts = document.getElementById(funcName + "Div").children;
    var len = funcDivElts.length;

    for (var i = 1; i < len-1; ++i) { // Skip the button and the value text input
        args.push(funcDivElts[i].value);
    }

    contract.state[funcName].apply(null,args).txParams({value : funcDivElts[len-1].value * eth}).callFrom(privkey).then(afterTX);
}

function afterTX(result) {
    var afterTXstring = "TX returned: " +
        ((result === undefined) ? "(nothing)":result);


    Promise.props(contract.state).then(function(sVars) {
        afterTXstring += "\n\n Contract storage state:\n\n";
        for (name in sVars) {
            var svar = sVars[name]
            if (typeof svar === "function") {
                continue;
            }
            afterTXstring += "  " + name + " = " + svar + "\n";
        };
    }).then(contract.account.balance.then(function(bal) {
         afterTXstring += "\n Contract balance =  " + bal + "\n";
       }))
      .then(blockapps.ethbase.Account(globalKeystore.addresses[0]).balance.then(function(userBal) {
         console.log("did this fail?");
         afterTXstring += "\n your balance = " + userBal + "\n";
       }))
      .then(function() {
       document.getElementById("afterTXarea").textContent = afterTXstring;
    });
}

<script src="${data.apiURL}/static/js/ethlightjs.min.js"></script>
<script src="${data.apiURL}/static/js/api.js"></script>
<script>

var blockapps = require("blockapps-js");
var Promise = require("bluebird");


var contract = blockapps.Solidity.attach( ${JSON.stringify(data.contractMeta)} );
blockapps.query.serverURI = '$data.apiURL';

var Units = blockapps.ethbase.Units;

${data.txFailedHandlerCode};

function storageAfterTX(result) {
    var afterTXstring = "TX returned: " +
        ((result === undefined) ? "(nothing)":result);

    return Promise.props(contract.state).then(function(sVars) {
        afterTXstring += "\n\n Contract storage state:\n\n";
        for (name in sVars) {
            var svar = sVars[name]
            if (typeof svar === "function") {
                continue;
            }
            afterTXstring += "  " + name + " = " + svar + "\n";
        };
      return afterTXstring;  
    });
} 

function contractBalanceAfterTX(txString) {
    return contract.account.balance.then(function(bal) {
        return txString + "\n Contract balance =  " +
            Units.convertEth(bal).from("wei").to("ether") + " ether\n";
    });
}

/*
function userBalanceAfterTX(txString) {
    return blockapps.ethbase.Account(globalKeystore[0].addresses[0]).balance.then(function(userBal) {
        return txString + "\n Your balance     =  " +
            Units.convertEth(userBal).from("wei").to("ether") + " ether\n";
    });
}
*/

function resetTextArea(txString)  {
    document.getElementById("afterTXarea").textContent = txString;
}

function afterTX(result) {
    storageAfterTX(result)
      .then(function (txStr) { 
          return contractBalanceAfterTX(txStr);
        })
      .then(function (txStr) { 
          resetTextArea(txStr);
      }).catch(function (err) {
          console.log("error caught: " + err); 
      });
} 
</script>
